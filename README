System info
===========

This is a firmware recipe for GL.iNet GL-AP1300 routers and access points
using arm32 Arachsys Linux. These have a 4-core Qualcom IPQ4018 SoC with
256MB RAM, 128MB NAND flash, dual gigabit NICs and dual 2.4GHz and 5GHz
ath10k wifi.

The build script requires a host which can run arm32 binaries in a chroot,
either natively or under emulation using binfmt-misc. It fetches the latest
vendor bootloader, constructs the rootfs image, fetches/patches/builds the
required tools and kernel, then constructs images ready to flash or boot
over tftp.

Mainline kernels are still missing ipqess ethernet and dsa support for
ipq40xx so we patch this in, together with a suitable device tree and a
handful of other small system-specific additions and fixes. We hard-code
the correct cmdline as the stock bootloader passes an unsuitable one.

The u-boot bootloader, u-boot environment and ath10k wifi calibration data
are stored in a 4MB partitioned NOR flash device which linux sees as
/dev/mtd[0-7]. The large 128MB NAND flash appears as /dev/mtd8 and is split
into two UBI volumes: a static 6MB ubi0:kernel for linux and a dynamic
ubi0:rootfs for the ubifs root filesystem.

Although the UBI layer provides wear-levelling, the system is configured
never to write to flash during normal operation and boots with / mounted
read-only. /var is symlinked to the tmpfs /run and syslog is redirected
to dmesg using syslogd -k.

There is no RTC so the clock reads 1970-01-01 00:00:00 UTC at boot;
this is corrected using openntpd once the network is up and working.


Flashing the bootloader
-----------------------

Power on the router while holding the recessed reset button. The power
light will flash five times then illuminate continuously. Release the reset
button. After a few seconds, the power light will start to blink quickly.

The bootloader is now running a recovery web server, accessible via the LAN
ethernet port. From the factory, this will be on 192.168.1.1; if the u-boot
environment has been updated as below, it will be on 172.16.0.1. The
bin/uboot.img file can be uploaded at http://192.168.1.1/uboot.html or
http://172.16.0.1/uboot.html respectively.

Alternatively, from linux where the u-boot partition is mtd6, use

  flashcp bin/uboot.img /dev/mtd6

but this may not be possible if mtd6 is write-protected.

The latest bootloader release merges a number of my cosmetic fixes and
should be updated on all devices from the factory.


Flashing the firmware
---------------------

The combined kernel + rootfs NAND image in bin/image.ubi can be flashed
through the http://192.168.1.1/ or http://172.16.0.1/ recovery web
interface. However, this wipes the block erase counters used for
wear-levelling, so it is better to flash from a tftp-booted linux if
possible.

To flash bin/image.ubi from linux where the large NAND flash device is
/dev/mtd8, use

  ubidetach -m 8
  ubiformat -f bin/image.ubi /dev/mtd8
  ubiattach -d 0 -m 8

We reattach the UBI device after flashing it to ensure the rootfs is
expanded to fill the available space. The bootloader would otherwise
attempt to do this at startup but its implementation is buggy.


Fixing the u-boot environment
-----------------------------

The build recipe compiles a u-boot environment image bin/environ.img from
the configuration in config/environ. To flash this from linux, use

  flashcp bin/environ.img /dev/mtd5

This moves the default IP address for the recovery web server and tftp
client to 172.16.0.1, the default tftp server address to 172.16.0.2 and
allows tftp boot to be triggered with the reset button.

To dump the current state of the u-boot environment, use

  while IFS='=' read -d '' -r KEY VALUE && [[ -n $KEY ]]; do
    printf '%s %s\n' "$KEY" "$VALUE"
  done < <(tail -c +5 /dev/mtd5)


Booting from a tftp server
--------------------------

To tftp-boot with the fixed u-boot environment, first power on the router.
Both lights will illuminate, then the WAN light will extinguish. At this
point, press and hold the recessed reset button.

After five seconds, the LAN interface will be configured with address
172.16.0.1 and attempt to fetch the file gl-ap1300.itb by tftp from
172.16.0.2. If it succeeds, the router will boot from this image.

The directory /tmp/tftp can be exported using dnsmasq with

  dnsmasq --enable-tftp --no-daemon --port=0 --tftp-root=/tmp/tftp

and a suitable kernel + initramfs is built in bin/initramfs.itb using
the same rootfs as the main firmware image. The power light will flash as
this image is transferred. It then illuminates solidly as the kernel is
uncompressed and booted, flashes as the userspace boots and generates
an ephemeral ssh host key, then illuminates solidly again once boot
is complete. The device is now accessible by ssh on 172.16.0.1 with an
empty root password.


Updating an existing installation
---------------------------------

The NAND flash need not be completely rewritten to update. The kernel can
be replaced with

  ubiupdatevol /dev/ubi0_0 bin/kernel.itb

and the root filesystem can be mounted read-write and updated directly.

It is safer to test new kernels by tftp boot before flashing them. As the
initramfs and standard root filesystems are identical, /bin and /lib can
be updated with rsync following a successful tftp boot:

  mount -m -t ubifs ubi0:roofs /root
  rsync -v -a -H --delete /bin /lib /root/
  cp -a -t /root --parents \
    /etc/{fstab,group,kakrc,passwd,protocols,services,ssh/*_config,ssl}

although (rare) changes to the device-specific /etc/dnsmasq.conf,
/etc/filter, /etc/init, etc. may need merging more carefully.
